
//store the different sprites in PROGMEM to save RAM

//sprite 0
//const byte Eau[] PROGMEM = {16,16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xF7,0xFA,0xEB,0xFF,0xFF,0xDF,0xFF,0xAF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFF,0xF5,0xFF,0xFF,0xDF,0xFF,0xAF,0xDF,0xFF,0xAF,0xFF,0xFF,0xFF,};
//const byte Eau[] PROGMEM = {16,16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF8,0xEB,0xFF,0xFF,0xDF,0xFF,0xAF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF1,0xFF,0xFF,0xFF,0xFF,0x8F,0xDF,0xFF,0xAF,0xFF,0xFF,0xFF,};
//const byte Eau2[] PROGMEM = {16,16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFA,0xE3,0xFD,0xFF,0xFF,0xFF,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF5,0xFF,0xFB,0xFF,0xFF,0xAF,0xFF,0xDF,0x8F,0xFF,0xFF,0xFF,};
const byte Eau[] PROGMEM = {16,16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xFF,0xF5,0xFF,0xCE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,0x9C,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,};
const byte Eau2[] PROGMEM = {16,16,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,0x9C,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xFF,0xD7,0xFF,0x39,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,};

//sprite 1
const byte Fleure[] PROGMEM = {16,16,0x0,0x0,0x50,0x0,0x20,0x28,0x50,0x10,0x0,0x28,0x0,0x0,0x0,0x0,0x1,0x40,0x0,0x80,0x1,0x40,0x0,0x0,0x0,0x14,0x28,0x8,0x10,0x14,0x28,0x0,0x0,0x0,};
const byte Fleure2[] PROGMEM = {16,16,0x0,0x0,0x50,0x50,0x20,0x20,0x50,0x50,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x80,0x1,0x0,0x2,0x80,0x0,0x0,0x0,0x14,0x28,0x8,0x10,0x14,0x28,0x0,0x0,0x0,};

//sprite 2
const byte Foret[] PROGMEM = {16,16,0x0,0x0,0x10,0x0,0x6D,0x0,0x54,0x8,0xAA,0x14,0x54,0x8,0x6C,0x20,0x12,0x0,0x0,0x10,0x0,0x6C,0x4,0x54,0x10,0xAA,0x28,0x54,0x10,0x6C,0x0,0x10,0x0,0x0,};
const byte Foret2[] PROGMEM = {16,16,0x0,0x0,0x10,0x0,0x6D,0x0,0x54,0x8,0xAA,0x14,0x54,0x8,0x6C,0x20,0x10,0x0,0x0,0x10,0x0,0xEC,0x4,0x54,0x10,0xAA,0x28,0x54,0x10,0x6C,0x0,0x10,0x0,0x0,};

//sprite 3
const byte Pavillon[] PROGMEM = {16,16,0x0,0x8,0x0,0xA4,0x0,0x48,0x0,0x30,0x0,0x30,0x1,0xF0,0x2,0x8,0x4,0x64,0x8,0x62,0x10,0x1,0x20,0x1,0x2E,0x3D,0x2A,0x25,0x2E,0x25,0x20,0x35,0x20,0x25,};
const byte Pavillon2[] PROGMEM = {16,16,0x0,0x0,0x0,0x8,0x0,0x68,0x0,0x30,0x0,0x30,0x1,0xF0,0x2,0x8,0x4,0x64,0x8,0x62,0x10,0x1,0x20,0x1,0x2E,0x3D,0x2A,0x25,0x2E,0x25,0x20,0x35,0x20,0x25,};

//sprite 4
const byte RoofTop[] PROGMEM = {16,16,0x2,0x0,0x5,0xC0,0x8,0x30,0x10,0x8,0x21,0x4,0x44,0xA4,0x42,0x42,0x4C,0x26,0x36,0x48,0x4,0x78,0x6,0x40,0x4,0x50,0x26,0x48,0x25,0x48,0x7A,0xF8,0x0,0x0,};
const byte RoofTop2[] PROGMEM = {16,16,0x4,0x0,0xB,0x80,0x10,0x60,0x20,0x10,0x42,0x8,0x4D,0x48,0x84,0x84,0x9C,0x44,0x66,0x48,0x4,0x70,0x6,0x40,0x4,0x60,0x46,0x50,0x25,0x48,0x7A,0xF8,0x0,0x0,};

//sprite 5
const byte Usine1_1[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0xAA,0xAA,0x18,0x0,0x24,0x0,0x42,0x40,0xB9,0x42,0xA5,0xFF,0xA5,0x42,0x9D,0x2,0x42,0x0,0x65,0x55,0xBA,0xAA,};
const byte Usine1_2[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xAA,0xAA,0x55,0x55,0x18,0x0,0x24,0x0,0x42,0x2,0x9D,0x42,0xA5,0xFF,0xA5,0x42,0xB9,0x40,0x42,0x0,0xE6,0xAA,0x5D,0x55,};

//sprite 6
const byte Usine2_1[] PROGMEM = {16,16,0x0,0x20,0x0,0x50,0x38,0x20,0x67,0xFE,0x55,0x82,0x4C,0x82,0x38,0xF2,0x21,0xA,0x32,0xE6,0xA,0x96,0x6,0x96,0x76,0x76,0x55,0xA,0x74,0xF2,0x7,0xFE,0x0,0x0,};
const byte Usine2_2[] PROGMEM = {16,16,0x0,0x20,0x0,0x50,0x38,0x20,0x4F,0xFE,0x55,0x2,0x64,0x82,0x38,0xF2,0x21,0xA,0x12,0x76,0x1A,0x96,0x6,0x96,0x76,0xE6,0x75,0xA,0x74,0xF2,0x7,0xFE,0x0,0x0,};

//alternatif
const byte cactus1[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x1,0xC0,0x2,0x20,0x5,0x10,0x4,0x18,0xC,0x52,0x4,0x17,0x35,0x15,0x4C,0x1F,0xCC,0x11,0x54,0x3,0x45,0x3E,0x20,0x10,0x10,0x10,0xF,0xF0,};
const byte cactus2[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x3,0xC0,0x4,0x20,0xA,0x20,0x8,0x30,0x8,0xA4,0x8,0x2E,0x6A,0x2A,0x98,0x1E,0x98,0x12,0x90,0x2,0x8A,0x7E,0x40,0x10,0x20,0x20,0x1F,0xE0,};







const byte * GetSpriteById(byte idSprite)
{
  if(gb.frameCount%10 > 4) {
    idSprite += 7;
  }
  switch(idSprite)
  {
    case 0 :  
    return Eau;
    break;
    case 1 :
    return Fleure;
    break;
    case 2 :
    return cactus1;
    break;
    case 3 :
    return Pavillon;
    break;
    case 4 :
    return RoofTop;
    break;
    case 5 :
    return Usine2_1;
    break;
    case 6 :
    return Usine1_1;
    break;
    
    case 7 :  
    return Eau2;
    break;
    case 8 :
    return Fleure2;
    break;
    case 9 :
    return cactus2;
    break;
    case 10 :
    return Pavillon2;
    break;
    case 11 :
    return RoofTop2;
    break;
    case 12 :
    return Usine2_2;
    break;
    case 13 :
    return Usine1_2;
    break;
  }
}

#define NB_ZONE 10
//x1,y1, x2 ,y2, tuile
const byte Zones[NB_ZONE*5] PROGMEM = 
{
  19,0,118,31,3,
  56,68,64,74,0,
  0,32,32,62,0,
  47,94,86,116,0,
  42,35,93,57,5,
  14,62,113,93,6,
  98,35,110,44,3,
  111,49,119,60,3,
  47,94,127,127,4,
  14,116,30,123,3,
};


#define WORLD_W 128
#define WORLD_H 128
const byte world[] PROGMEM = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x0,0x1F,0xFF,0x80,0x0,0x7F,0xFF,0xE0,0x0,0x0,0x7,0xC0,0x3F,0xFF,0xFF,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0xFF,0x8C,0xFF,0xC0,0x0,0x7,0xFE,0x0,0x0,0x7,0x7B,0xDD,0xE4,0xF,0x0,0x7E,0xFF,0x98,0xFF,0x8F,0xE7,0x80,0x3C,0x3F,0xE1,0xE7,0x7B,0xDD,0xE4,0x6F,0x7F,0x7E,0xFF,0x91,0xFF,0x1F,0xE7,0x80,0x30,0x7F,0xF3,0xE7,0x0,0x1,0xE4,0xE0,0x7F,0x7E,0xFF,0xB3,0xFE,0x3F,0xE7,0xFF,0x30,0x7F,0xF3,0xE7,0x7B,0xDD,0xE0,0x3F,0xFF,0x7E,0xFF,0xB3,0xFC,0x7F,0xE7,0xFF,0x31,0x7F,0xF3,0xE7,0x7B,0xDD,0xE0,0x0,0xFF,0x7C,0xFF,0x93,0xF8,0xE0,0x7,0xFF,0x33,0x7F,0xF3,0xE7,0x7B,0xDD,0xE7,0x80,0xC1,0x1,0xFF,0x83,0xF1,0xC7,0xE7,0xC0,0x33,0x7F,0xF3,0xE7,0x0,0x1,0xE7,0x8C,0x1D,0x7F,0xFF,0xF3,0xE3,0x8F,0xE7,0xDF,0x33,0x60,0x23,0xE7,0xFF,0xFF,0xE0,0x1C,0xD9,0x7F,0xFF,0xF3,0xE7,0x1F,0xE7,0xDF,0x33,0x6F,0x83,0xE7,0x0,0x0,0x60,0x3C,0xD9,0x7F,0xF,0xF3,0xE6,0x3F,0xE7,0xDF,0x33,0x6F,0x83,0xE7,0x0,0x0,0x67,0xFC,0xDF,0x7E,0x7,0xF3,0xE4,0x0,0x3,0xDF,0x33,0x6F,0x9F,0xE7,0x3F,0x9E,0x60,0x1C,0xCE,0x7C,0x7,0xE0,0xE0,0xDB,0xD8,0x1F,0x33,0x6F,0x9F,0xE7,0x3F,0x1E,0x60,0x1C,0xEC,0x78,0x7,0xE0,0xE1,0xDB,0xDB,0xC0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x67,0x80,0x0,0xF0,0x47,0xE4,0xE7,0xD9,0x9B,0xFF,0x3,0xF8,0x0,0x0,0x7C,0x7E,0x67,0x80,0x1,0xE0,0xC7,0xE0,0xE7,0xD9,0x9B,0xFF,0xCF,0xF9,0xFF,0xFF,0xF8,0xFE,0x60,0x1F,0xFF,0xC1,0xC7,0xE0,0xE7,0xDD,0xBB,0xFF,0xCE,0x1,0xFF,0xC0,0x1,0xFE,0x60,0x1F,0xFF,0x83,0xC7,0xF3,0xE7,0xDD,0xBB,0xFC,0x0,0xF9,0xFF,0xC0,0x3,0xFE,0x67,0xFF,0xFF,0x7,0xC7,0xF3,0xE7,0xC0,0x3,0xF8,0xF,0xF9,0xFF,0xCF,0xFF,0xFE,0x7,0xFF,0xFE,0xF,0xC7,0xF3,0xE7,0xFC,0xFF,0xF0,0xFF,0xF8,0x0,0xF,0xFF,0xFE,0x3,0x0,0x0,0x1F,0xC7,0xF3,0xE7,0xFC,0xFF,0xF3,0xFF,0xF8,0x0,0xF,0xFF,0xFF,0xD0,0x0,0x0,0x3F,0xC7,0xF3,0xE7,0xFC,0xFF,0xF3,0xFF,0xF9,0xFF,0xE7,0xFF,0xFF,0xD0,0x38,0x0,0x7F,0xC7,0xF0,0x7,0xFC,0xFF,0xF3,0xFF,0xF9,0xFF,0xF3,0xFF,0xFF,0xDC,0xF8,0xFF,0xFF,0xC7,0xF3,0xE7,0xFC,0xFF,0xF2,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0xF9,0xFF,0xFF,0xC7,0x83,0xE3,0xFC,0xFF,0xF2,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0xF1,0xFF,0xFF,0xC7,0x83,0xF3,0xFC,0xFF,0xF2,0x7F,0xFF,0xFE,0xFC,0xFC,0xFF,0xE4,0xE3,0xFF,0xFF,0xC7,0x9F,0xF1,0xFC,0xFF,0xF2,0x7F,0xF0,0x0,0xFC,0xFC,0xFF,0xE4,0xC7,0xFF,0xFF,0xC7,0x9F,0xF8,0xFC,0xFF,0xF2,0x7F,0xF0,0x3,0x8C,0xFC,0xE0,0x64,0xF,0xFF,0xFF,0xC7,0x9F,0xFC,0x7C,0xFF,0xF2,0x7F,0xE7,0xFF,0xAC,0x0,0x0,0x64,0x1F,0xFF,0xFF,0xC7,0x9F,0xFE,0x0,0x0,0x2,0x0,0x7,0x1,0xA4,0x0,0x6,0x64,0xFF,0xFF,0xFF,0xC7,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xB7,0xE7,0xFE,0x64,0xF8,0x1,0xFF,0xC7,0x80,0x0,0x7,0xFF,0x30,0x7F,0x70,0x39,0xB0,0x0,0x2,0x64,0xF0,0x0,0x7F,0xC7,0xDF,0xF7,0xC7,0xFF,0x36,0x41,0x7F,0x39,0x9F,0x80,0xF8,0x4,0xE3,0xFC,0x7F,0xC7,0xC0,0x7,0x8F,0xFF,0x36,0x5D,0x0,0x38,0x1C,0x3F,0x80,0x4,0xC7,0xFE,0x7F,0xC7,0xDF,0x9F,0x1F,0xFF,0x36,0x5C,0x0,0x38,0x0,0x0,0x2,0x60,0xCF,0xFE,0x7F,0xC7,0xD0,0xBE,0x3F,0xFF,0x36,0x5C,0x3F,0x3F,0xF8,0x23,0xBE,0x60,0xCF,0xFE,0x7F,0xC7,0xD6,0xBC,0x7F,0xFF,0x32,0x51,0x3E,0x0,0xF8,0x27,0xBE,0x64,0xC,0x6,0x7F,0xC7,0xD6,0x38,0xFF,0xFF,0x30,0x11,0x3E,0x7E,0xF8,0xE7,0xBE,0x64,0xD,0x50,0x7F,0xC7,0xD7,0xF1,0xFF,0xFF,0x3A,0x51,0x3E,0x7E,0xFD,0xE7,0x80,0x64,0xCD,0x56,0x7F,0x87,0xC7,0xE3,0xFF,0xFF,0x3A,0x5F,0x3E,0x70,0x1,0xC7,0x80,0x64,0xC5,0x56,0x3F,0x7,0xC7,0xE3,0xFF,0xFF,0x3A,0x5F,0x3E,0x70,0x0,0x0,0x33,0xE4,0xE5,0x57,0x1E,0x7,0xC7,0xE3,0xFF,0xFF,0xA,0x40,0x1E,0x73,0xFF,0xFF,0xF3,0xE4,0xE0,0x3,0x84,0xF,0xC7,0xE3,0xFF,0xFF,0x2,0x40,0x1E,0x3,0xFF,0xE0,0x0,0x4,0xE0,0xFB,0xC0,0x3F,0xEF,0xE3,0xFF,0xFF,0x3E,0x7F,0x9E,0x0,0x3,0xE0,0x0,0x4,0xF0,0xFB,0xE0,0x3F,0xC1,0xE3,0xFF,0xFF,0x3E,0x7F,0x9F,0xF0,0x3,0xE7,0xCC,0xFC,0xFC,0x38,0x7C,0x1F,0xDD,0xE3,0xFF,0xFF,0x3E,0x60,0x1F,0xFF,0xF3,0xE6,0xC,0x0,0xFE,0xF,0x3E,0x1F,0xC1,0xE3,0xFF,0xFF,0x3E,0x60,0x1F,0xFF,0xF1,0xE6,0xC,0xFC,0xFF,0x87,0x9F,0x1F,0xC1,0xE3,0xFF,0xFF,0x3E,0x67,0xFF,0xFF,0xF0,0xE6,0x7C,0xC,0xFF,0xE1,0xDF,0x1F,0xC1,0xC3,0xFF,0xFF,0x20,0x67,0xE0,0x0,0xF8,0xE6,0x0,0xAC,0x1,0xF1,0xDF,0xF,0xD9,0x87,0xFF,0xFF,0x4,0x67,0xEF,0xFE,0xF9,0xE6,0x1,0xA0,0x1,0xF9,0x83,0x7,0xC1,0x8F,0xFF,0xFF,0x8E,0x60,0xF,0xE0,0x1,0xE6,0x7F,0xBD,0xF8,0xF9,0xBB,0x83,0xF9,0x8F,0xFF,0xFF,0x9E,0x60,0x0,0x0,0xF,0xE4,0x0,0x1D,0xFC,0x79,0x83,0xC3,0xF9,0x87,0xFF,0xFF,0x9E,0x7F,0xC0,0x7,0x8F,0xE4,0xF7,0xD9,0xFC,0x78,0x3B,0xE3,0xC1,0xC3,0xFF,0xFF,0x9E,0x7F,0xCF,0xFF,0x9F,0xE4,0xF7,0xDB,0xFE,0x79,0x83,0xE3,0xC1,0xE3,0xFF,0xFF,0x1E,0x7F,0xCF,0xFF,0x3F,0xE4,0xF7,0xDB,0xFE,0x79,0xBB,0xE3,0xCF,0xE3,0xFF,0xFF,0x2,0x7F,0xCF,0xFF,0x3F,0xE4,0x70,0x1B,0xFE,0x79,0x83,0xC3,0xC1,0xE3,0xFF,0xFF,0x3A,0x0,0x0,0x0,0x0,0x6,0x77,0xFB,0xFE,0x79,0xBB,0x83,0xC0,0xE3,0xFF,0xFF,0x3A,0x0,0x0,0x0,0x0,0x6,0x77,0xF9,0xFE,0x79,0x83,0x7,0xD8,0x63,0xFF,0xFF,0x3B,0xF3,0xFF,0xFF,0xEF,0xFE,0x3,0xFD,0xFE,0x79,0xDE,0xF,0xDC,0x63,0xFF,0xFF,0x38,0x1,0xFE,0x0,0xEF,0xC6,0x0,0x0,0x0,0x79,0xDE,0x1F,0xDE,0x63,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF8,0x0,0x0,0x79,0xDE,0x3F,0x8E,0x62,0x0,0x0,0xF,0xFC,0x0,0xFF,0x0,0x10,0xFF,0xFF,0xFE,0x78,0x1E,0x3F,0x86,0x62,0x1F,0xE7,0x87,0xFF,0xFF,0xFF,0x3F,0x79,0xFF,0xFF,0xFE,0x79,0xFE,0x3F,0x82,0x62,0x3F,0xE7,0xC3,0xFF,0xC0,0xFF,0x3C,0x79,0xFF,0xFF,0xFE,0x79,0xFE,0x3F,0x92,0x62,0x7F,0xE7,0xE0,0x0,0x0,0x7F,0x30,0xF9,0xFF,0xFF,0xFE,0x79,0xFE,0x3F,0x92,0x62,0x7F,0xE0,0xF0,0x0,0xE,0x3F,0x37,0xF9,0xFF,0xFF,0xFE,0x79,0xFE,0x3F,0x82,0x62,0x7F,0xE0,0x3F,0xFF,0x80,0x0,0x0,0x0,0x0,0x7F,0xFE,0x79,0xFE,0x3F,0x86,0x62,0x7F,0xE4,0xF,0xFF,0xC0,0x0,0x0,0x0,0x0,0x7F,0xFE,0x79,0xFE,0x3F,0x8E,0x62,0x7F,0xC7,0x7,0xFF,0xFC,0xFF,0x37,0xF9,0xDE,0x7F,0xFE,0x79,0xFE,0x3F,0x8E,0x62,0x3F,0xCF,0x81,0xFF,0xFC,0xFF,0x30,0x79,0xDE,0x7F,0xFE,0x70,0xE,0x3F,0x9E,0x62,0x1,0xCF,0xE0,0x3F,0xFC,0xFF,0x3F,0x79,0xDE,0x7F,0xFC,0x0,0xE,0x3F,0x9C,0x62,0x1,0xCF,0xF8,0x1F,0xFC,0xFF,0x0,0x0,0x0,0x0,0x0,0x7,0xCE,0x3F,0x98,0x63,0xF1,0xCF,0xFF,0xF,0xFC,0xFF,0x0,0x0,0x0,0x0,0x0,0x9F,0xCE,0x1F,0x90,0x63,0xF0,0x0,0x0,0x0,0x0,0x0,0x3F,0x39,0xFE,0x7F,0xFF,0x9F,0xCE,0x1F,0x80,0xE3,0xC0,0x0,0x0,0x0,0x0,0x0,0x3E,0x39,0x2,0x7F,0xFF,0x9F,0xCF,0xF,0x81,0xE3,0x83,0xC7,0x9E,0x3C,0xFC,0xFF,0x3C,0x38,0x0,0x7F,0xFF,0x9F,0xCF,0x8F,0x83,0xC2,0x7,0xC7,0x9E,0x3C,0xFC,0xFF,0x38,0x78,0x78,0x7,0xFF,0x9F,0xCF,0x8F,0x87,0x0,0x27,0xC7,0x9E,0x3C,0xFC,0xFF,0x38,0xF9,0xFE,0x3,0xFF,0x9F,0x87,0x8F,0x8E,0x0,0xE7,0xC7,0x9E,0x3C,0xFC,0x0,0x39,0xF9,0xFE,0x71,0xFF,0x9F,0x3,0x87,0x8C,0x3,0xE7,0xC7,0x9E,0x3C,0x0,0x0,0x0,0x0,0x0,0x78,0xFF,0x1E,0x31,0xC7,0x88,0x63,0xE7,0xC7,0x9E,0x3C,0x0,0x3F,0x0,0x0,0x0,0x7C,0x7F,0x0,0x78,0x7,0x80,0xE3,0xE7,0xC7,0x9E,0x3C,0xFF,0x3F,0x9F,0x7F,0xFF,0x3E,0x3F,0x0,0x78,0x7,0x81,0xE3,0xE7,0xC7,0x9E,0x3C,0xFF,0x3F,0x9F,0x7F,0xFF,0x9F,0x1E,0x3E,0x31,0xC7,0x83,0xE3,0xE7,0xC7,0x9E,0x3C,0xFF,0x3F,0x9F,0x7F,0xFF,0x8F,0x9C,0x3F,0x3,0xC3,0x87,0xE3,0xE7,0xC7,0x9E,0x3C,0xFF,0x3F,0x9E,0x7F,0xFF,0xC3,0x98,0xF,0x87,0xC1,0x8F,0xE3,0xE7,0xC7,0x9E,0x3C,0xFF,0x3F,0x9E,0xFF,0xFF,0xF3,0x90,0xF,0xCF,0xC1,0x8F,0xE3,0xE0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xCF,0xCF,0xC1,0xCF,0xE3,0xE0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xCF,0xCF,0xC1,0xC0,0x63,0xE6,0xDB,0x1B,0x6D,0xB6,0xDB,0x1F,0xFF,0xFF,0x9F,0xFF,0x0,0x0,0x1,0xCC,0x63,0xE7,0xFF,0x0,0x0,0x0,0x3,0x81,0xFF,0xFF,0x9F,0xFE,0x0,0x0,0x9,0xCC,0x63,0xE7,0xFF,0x0,0x0,0x0,0x3,0xC0,0x7F,0xFF,0x87,0xFC,0x0,0x0,0x19,0xCE,0x63,0xC3,0xFE,0x3F,0xFF,0xFE,0x0,0x0,0x3F,0xFF,0xC3,0xF8,0x3F,0xFF,0xF9,0xCE,0x63,0x81,0xFC,0x7F,0xFF,0xFE,0x0,0x0,0x3F,0xFF,0xF1,0xF0,0x70,0x0,0x1,0xCE,0x63,0x18,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFF,0xF8,0xF0,0xC0,0x0,0x1,0xCE,0x60,0x3C,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0x9F,0xFF,0xFC,0x1,0xC1,0xFF,0x91,0xC0,0x60,0x3C,0x1,0xFF,0xFF,0xFF,0xFE,0x1F,0x9F,0xFF,0xFE,0x1,0xCF,0xFF,0xD1,0xCC,0x63,0x18,0xE3,0xFF,0xFF,0xFF,0xFE,0xF,0x9F,0x3,0xFF,0xF1,0xCF,0x80,0x11,0xCC,0x63,0x81,0xE7,0xFF,0xFF,0xFF,0xFE,0xCF,0x9E,0x3,0xFF,0xE1,0xCF,0x9F,0xF1,0xCF,0x23,0xC3,0xC3,0xFF,0xFF,0xFF,0xFE,0x8F,0x9E,0x33,0xFF,0xC1,0xC0,0x3F,0xF1,0xCF,0x23,0xE7,0x0,0x0,0x0,0xF,0xFE,0x80,0x0,0x33,0xFF,0x83,0xCF,0x80,0x1,0xC7,0x23,0xE6,0x0,0x0,0x0,0x7,0xFE,0x9F,0x80,0x3,0xFF,0x7,0xCF,0xBC,0xFB,0xC3,0x23,0xE4,0x0,0x0,0x0,0x7,0xFE,0x1F,0x9F,0x7,0xFE,0x7,0xCF,0xBC,0xFB,0xC1,0x23,0xE0,0x3C,0xFF,0xFF,0x83,0xFF,0xFF,0x9F,0xFF,0xFC,0x7,0xC0,0x3C,0x1B,0xE1,0x23,0xE0,0x7C,0x7F,0xFF,0xC1,0xFF,0xFF,0x9F,0xFF,0xF8,0x7,0xC1,0xFC,0xB,0xF1,0x21,0xE0,0xFE,0x3F,0xE1,0xE0,0xFF,0xFF,0x9F,0xFF,0xF0,0x61,0xF9,0xF8,0xCB,0xF1,0x20,0x1,0xFF,0x1F,0xED,0xF0,0x7F,0xFF,0x9F,0xFF,0xE0,0xF0,0xF9,0xE0,0xC3,0xF1,0x30,0x3,0xFF,0x83,0xED,0xF8,0x1F,0xFF,0x9F,0xFF,0xC1,0xF8,0x39,0x87,0xC3,0xF1,0x38,0x7,0xFF,0xC0,0xED,0xFC,0x3,0xFF,0x9F,0xFE,0x3,0xCE,0x9,0xF,0xC3,0xF1,0x3C,0xF,0x0,0x0,0x0,0x1E,0x0,0x7F,0x9F,0xFC,0x7,0xC7,0x80,0x1F,0x87,0xF0,0x3F,0xFE,0x0,0x0,0x6F,0xDF,0x0,0x0,0x0,0x0,0xF,0xD3,0xE0,0x9F,0xF,0xF0,0x3F,0xFC,0x3E,0x7E,0x6F,0xDF,0xE0,0x0,0x0,0x0,0x3F,0x83,0xE3,0x9E,0x1F,0xF0,0x7F,0xF8,0x7E,0x7E,0x60,0x0,0xFC,0x0,0x0,0x1,0xFE,0x3,0xE7,0x9C,0x3F,0xF0,0xF8,0x1,0xFE,0x7E,0x7F,0xFE,0xFF,0xFF,0x9F,0xFF,0xF8,0x3,0xE7,0x1C,0x7F,0xF1,0xF8,0x3,0xC0,0x0,0x0,0x2,0xFF,0xFF,0x9F,0xFF,0xE0,0x33,0xE7,0x1C,0xFF,0xF0,0x39,0xFF,0x80,0x0,0xF,0x7A,0xFF,0xFF,0x9F,0xF8,0x0,0xF3,0xE7,0x3C,0xFF,0xF0,0x9,0xFF,0x9E,0xFF,0xCF,0x78,0x1,0xFF,0x9F,0xF8,0x7,0xF1,0xE7,0x38,0x3F,0xF3,0x1,0xFF,0x9E,0xFF,0xCF,0x3,0xFD,0xFF,0x9F,0xF1,0xFF,0xE0,0xC6,0x38,0x3F,0xF7,0xC0,0x7F,0x9E,0xFF,0xCF,0xDF,0xFC,0x0,0x0,0x4,0x0,0x4,0x6,0x7B,0x3F,0xE7,0xFF,0x0,0x1E,0xFF,0xC0,0x0,0x0,0x68,0x0,0x0,0x4,0x4,0xE,0x7B,0x3F,0xEF,0xFF,0x0,0x1E,0x7F,0x0,0x0,0x0,0x0,0x2F,0xB1,0xF1,0xE0,0xBE,0x7B,0x3F,0xEF,0xFE,0x7B,0xFF,0x7F,0x7E,0x1F,0xFC,0x3F,0x2F,0x9F,0xFB,0xF1,0xBE,0x7B,0x3F,0xE7,0xFE,0xF9,0xFF,0x0,0x7F,0x87,0xFC,0x0,0x2F,0xD0,0x3,0xFB,0xBE,0x3,0x3F,0xF0,0x7C,0xFC,0xFF,0xFB,0xFF,0xC1,0xFF,0x7F,0xE0,0xD0,0x1,0xFB,0xBE,0x7F,0x3F,0xFF,0x1,0xFE,0x0,0x3,0xFF,0xF0,0x0,0x0,0x0,0x3,0xF8,0x0,0x0,0x0,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x0,0x0,0xE,0x7,0xF8,0x0,0x0,0x0,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,};
byte getTile(byte x, byte y){
  //le decalage dépend de la position du joueur je divise x/8 car j'ai 8 bit dans un byte. puis je décale du nombre de bit util pour ne garder que le premier
  return (pgm_read_byte(world + (y*16) + x/8) >> (7-((x%8)))& B00000001);
}

void drawWorld(){
   for(byte y = max(0, (camera_y)/16); y < min(WORLD_H, (camera_y+LCDHEIGHT)/16+1); y++){
    for(byte x = max(0, (camera_x)/16); x < min(WORLD_W, (camera_x+LCDWIDTH)/16+1); x++){
      byte spriteID = getTile(x,y);
      if(spriteID == 0)
        continue;
        
        byte numSprite = 2;
       //Verrification des zone de sprite
        for(byte i=0;i<NB_ZONE;i++)
        {
          byte decalage = 5*i;
          byte x1 = pgm_read_byte(Zones + decalage);
          byte y1 = pgm_read_byte(Zones +decalage+1);
          byte x2 = pgm_read_byte(Zones+decalage+2);
          byte y2 = pgm_read_byte(Zones+decalage+3);
          
          if(gb.collidePointRect(x,y,x1,y1,x2-x1,y2-y1))
          {
            numSprite = pgm_read_byte(Zones+decalage+4);
            break;
          }
        }
      //coordinates on the screen depending on the camera position
      int x_screen = x*16 - camera_x;
      int y_screen = y*16 - camera_y;
      gb.display.drawBitmap(x_screen, y_screen, GetSpriteById(numSprite));
    }
  }
}

void drawMiniMap(){
  
  int old_x = camera_x;
  int old_y = camera_y;
  camera_y = player.y/16;
  camera_x = player.x/16;
  byte cptFrame = 0;
  while(true)
  {
    if(gb.update())
    {
      for(byte y = camera_y; y < min(WORLD_H, camera_y+LCDHEIGHT); y++){
        for(byte x = camera_x; x < min(WORLD_W, camera_x+LCDWIDTH); x++){
          byte spriteID = getTile(x,y);
          if(spriteID == 0)
          {
            continue;
          }
          gb.display.drawPixel(x - camera_x , y-camera_y);
        }
      }
      
       gb.display.setColor(GRAY);
       if(cptFrame%20>9) {
         gb.display.drawPixel((player.x/16) - camera_x,(player.y/16) - camera_y);
         gb.display.drawCircle((player.x/16) - camera_x,(player.y/16) - camera_y, 2);
       }
       if(cptFrame%20>9){
         gb.display.drawPixel((xDest/16) - camera_x,(yDest/16) - camera_y);
         gb.display.drawCircle((xDest/16) - camera_x, (yDest/16) - camera_y , 4);
       }
       gb.display.setColor(BLACK);
        
       if(gb.buttons.repeat(BUTTON_LEFT, 1) &&  camera_x > 0)
       {
         camera_x--;
       }
       if(gb.buttons.repeat(BUTTON_RIGHT, 1)&&  camera_x < (WORLD_W-LCDWIDTH))
       {
         camera_x++;
       }
       if(gb.buttons.repeat(BUTTON_UP, 1)&&  camera_y > 0)
       {
         camera_y--;
       }
       if(gb.buttons.repeat(BUTTON_DOWN, 1)&&  camera_y < (WORLD_H-LCDHEIGHT))
       {
         camera_y++;
       }
       if(gb.buttons.pressed(BUTTON_A) || gb.buttons.pressed(BUTTON_C)||gb.buttons.pressed(BUTTON_B))
       {
         break;
       }   
       
       cptFrame++;
    }
  }
  camera_y = old_y;
  camera_x = old_x;
}



